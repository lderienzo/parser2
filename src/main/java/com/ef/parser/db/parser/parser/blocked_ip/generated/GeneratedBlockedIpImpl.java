package com.ef.parser.db.parser.parser.blocked_ip.generated;

import com.ef.parser.db.parser.parser.blocked_ip.BlockedIp;
import com.speedment.common.annotation.GeneratedCode;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.ef.parser.db.parser.parser.blocked_ip.BlockedIp}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedBlockedIpImpl implements BlockedIp {
    
    private long id;
    private String comment;
    
    protected GeneratedBlockedIpImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public String getComment() {
        return comment;
    }
    
    @Override
    public BlockedIp setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public BlockedIp setComment(String comment) {
        this.comment = comment;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "      + Objects.toString(getId()));
        sj.add("comment = " + Objects.toString(getComment()));
        return "BlockedIpImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof BlockedIp)) { return false; }
        final BlockedIp thatBlockedIp = (BlockedIp)that;
        if (this.getId() != thatBlockedIp.getId()) { return false; }
        if (!Objects.equals(this.getComment(), thatBlockedIp.getComment())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getComment());
        return hash;
    }
}