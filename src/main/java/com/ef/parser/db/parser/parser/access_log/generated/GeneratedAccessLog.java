package com.ef.parser.db.parser.parser.access_log.generated;

import com.ef.parser.db.parser.parser.access_log.AccessLog;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;
import java.sql.Timestamp;
import java.time.LocalDateTime;

/**
 * The generated base for the {@link
 * com.ef.parser.db.parser.parser.access_log.AccessLog}-interface representing
 * entities of the {@code access_log}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAccessLog {
    
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getId()} method.
     */
    LongField<AccessLog, Long> ID = LongField.create(
        Identifier.ID,
        AccessLog::getId,
        AccessLog::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getDate()} method.
     */
    ComparableField<AccessLog, Timestamp, LocalDateTime> DATE = ComparableField.create(
        Identifier.DATE,
        AccessLog::getDate,
        AccessLog::setDate,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getIpAddress()} method.
     */
    LongField<AccessLog, Long> IP_ADDRESS = LongField.create(
        Identifier.IP_ADDRESS,
        AccessLog::getIpAddress,
        AccessLog::setIpAddress,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getRequest()} method.
     */
    StringField<AccessLog, String> REQUEST = StringField.create(
        Identifier.REQUEST,
        AccessLog::getRequest,
        AccessLog::setRequest,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getStatus()} method.
     */
    IntField<AccessLog, Integer> STATUS = IntField.create(
        Identifier.STATUS,
        AccessLog::getStatus,
        AccessLog::setStatus,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link AccessLog} field that can be
     * obtained using the {@link AccessLog#getUserAgent()} method.
     */
    StringField<AccessLog, String> USER_AGENT = StringField.create(
        Identifier.USER_AGENT,
        AccessLog::getUserAgent,
        AccessLog::setUserAgent,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this AccessLog. The id field corresponds to the
     * database column parser.parser.access_log.id.
     * 
     * @return the id of this AccessLog
     */
    long getId();
    
    /**
     * Returns the date of this AccessLog. The date field corresponds to the
     * database column parser.parser.access_log.date.
     * 
     * @return the date of this AccessLog
     */
    LocalDateTime getDate();
    
    /**
     * Returns the ipAddress of this AccessLog. The ipAddress field corresponds
     * to the database column parser.parser.access_log.ip_address.
     * 
     * @return the ipAddress of this AccessLog
     */
    long getIpAddress();
    
    /**
     * Returns the request of this AccessLog. The request field corresponds to
     * the database column parser.parser.access_log.request.
     * 
     * @return the request of this AccessLog
     */
    String getRequest();
    
    /**
     * Returns the status of this AccessLog. The status field corresponds to the
     * database column parser.parser.access_log.status.
     * 
     * @return the status of this AccessLog
     */
    int getStatus();
    
    /**
     * Returns the userAgent of this AccessLog. The userAgent field corresponds
     * to the database column parser.parser.access_log.user_agent.
     * 
     * @return the userAgent of this AccessLog
     */
    String getUserAgent();
    
    /**
     * Sets the id of this AccessLog. The id field corresponds to the database
     * column parser.parser.access_log.id.
     * 
     * @param id to set of this AccessLog
     * @return   this AccessLog instance
     */
    AccessLog setId(long id);
    
    /**
     * Sets the date of this AccessLog. The date field corresponds to the
     * database column parser.parser.access_log.date.
     * 
     * @param date to set of this AccessLog
     * @return     this AccessLog instance
     */
    AccessLog setDate(LocalDateTime date);
    
    /**
     * Sets the ipAddress of this AccessLog. The ipAddress field corresponds to
     * the database column parser.parser.access_log.ip_address.
     * 
     * @param ipAddress to set of this AccessLog
     * @return          this AccessLog instance
     */
    AccessLog setIpAddress(long ipAddress);
    
    /**
     * Sets the request of this AccessLog. The request field corresponds to the
     * database column parser.parser.access_log.request.
     * 
     * @param request to set of this AccessLog
     * @return        this AccessLog instance
     */
    AccessLog setRequest(String request);
    
    /**
     * Sets the status of this AccessLog. The status field corresponds to the
     * database column parser.parser.access_log.status.
     * 
     * @param status to set of this AccessLog
     * @return       this AccessLog instance
     */
    AccessLog setStatus(int status);
    
    /**
     * Sets the userAgent of this AccessLog. The userAgent field corresponds to
     * the database column parser.parser.access_log.user_agent.
     * 
     * @param userAgent to set of this AccessLog
     * @return          this AccessLog instance
     */
    AccessLog setUserAgent(String userAgent);
    
    enum Identifier implements ColumnIdentifier<AccessLog> {
        
        ID         ("id"),
        DATE       ("date"),
        IP_ADDRESS ("ip_address"),
        REQUEST    ("request"),
        STATUS     ("status"),
        USER_AGENT ("user_agent");
        
        private final String columnId;
        private final TableIdentifier<AccessLog> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "parser";
        }
        
        @Override
        public String getSchemaId() {
            return "parser";
        }
        
        @Override
        public String getTableId() {
            return "access_log";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<AccessLog> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}